import baseTypes from './baseTypes';
//TODO 'HasEnchantment', 'CustomAlertSound', 'CustomAlertSoundOptional', 'DisableDropSound', 'EnableDropSound', 'DisableDropSoundIfAlertSound', 'EnableDropSoundIfAlertSound'

const defaultContent = JSON.stringify({
  rules: {
    'Blocks': ['Show', 'Hide', 'Minimal'],
    'Type Filters': [
      {
        property: 'Class',
        instance: 'Mul',
        defaultVal: { textValues: [] },
        options: 'Classes',
      },
      {
        property: 'BaseType',
        instance: 'Mul',
        defaultVal: { textValues: [] },
        options: 'BaseTypes',
      },
      {
        property: 'Rarity',
        instance: 'Sel',
        defaultVal: { operator: '>=', textValues: ['Rare'] },
        options: 'Rarity',
      },
    ],
    'ArmourFilters': [
      {
        property: 'BaseArmour',
        instance: 'Num',
        defaultVal: { operator: '>=', numValues: [100] },
        min: '0',
      },
      {
        property: 'BaseDefencePercentile',
        instance: 'Num',
        defaultVal: { operator: '>=', numValues: [5] },
        min: '1',
      },
      {
        property: 'BaseEnergyShield',
        instance: 'Num',
        defaultVal: { operator: '>=', numValues: [200] },
        min: '1',
      },
      {
        property: 'BaseEvasion',
        instance: 'Num',
        defaultVal: { operator: '>=', numValues: [153] },
        min: '1',
      },
      {
        property: 'BaseWard',
        instance: 'Num',
        defaultVal: { operator: '>=', numValues: [20] },
        min: '1',
      },
    ],
    'SocketFilters': [
      {
        property: 'LinkedSockets',
        instance: 'Num',
        defaultVal: { operator: '>', numValues: [4] },
        min: '2',
        max: '6',
      },
      {
        property: 'SocketGroup',
        instance: 'OprNumSoc',
        defaultVal: {
          operator: '>=',
          numValues: [5],
          sockets: {
            R: 1,
            G: 3,
            B: 0,
            A: 0,
            D: 0,
            W: 0,
          },
        },
        min: '2',
        max: '6',
      },
      {
        property: 'Sockets',
        instance: 'OprNumSoc',
        defaultVal: {
          operator: '>=',
          numValues: [5],
          sockets: {
            R: 1,
            G: 3,
            B: 0,
            A: 0,
            D: 0,
            W: 0,
          },
        },
        min: '2',
        max: '6',
      },
    ],
    'Miscellaneous': [
      {
        property: 'HasCruciblePassiveTree',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
      {
        property: 'AlternateQuality',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
      {
        property: 'AnyEnchantment',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
      {
        property: 'ArchnemesisMod',
        instance: 'Mul',
        defaultVal: { textValues: ['Toxic'] },
        options: 'ArchnemesisMods',
      },
      {
        property: 'Corrupted',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
      {
        property: 'CorruptedMods',
        instance: 'Num',
        defaultVal: { operator: '>', numValues: [1] },
        min: '0',
        max: '3',
      },
      {
        property: 'ElderItem',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
      {
        property: 'EnchantmentPassiveNode',
        instance: 'Mul',
        defaultVal: { textValues: ['Damage over Time'] },
        options: 'EnchantmentPassiveNodes',
      },
      {
        property: 'EnchantmentPassiveNum',
        instance: 'Num',
        defaultVal: { operator: '>', numValues: [1] },
        min: '0',
        max: '6',
      },
      {
        property: 'FracturedItem',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
      {
        property: 'GemQualityType',
        instance: 'Sel',
        defaultVal: { textValues: ['Superior'] },
        options: 'GemQualityTypes',
      },
      {
        property: 'HasEaterOfWorldsImplicit',
        instance: 'Num',
        defaultVal: { operator: '>', numValues: [1] },
        min: '0',
        max: '6',
      },
      {
        property: 'HasExplicitMod',
        instance: 'OprNumMul',
        defaultVal: {
          operator: '>=',
          numValues: [2],
          textValues: ['of Haast', 'of Tzteosh', 'of Ephij'],
        },
        options: 'ExplicitMods',
        min: '1',
        max: '6',
      },
      {
        property: 'HasInfluence',
        instance: 'Mul',
        defaultVal: { textValues: ['Elder'] },
        options: 'Influences',
      },
      {
        property: 'HasSearingExarchImplicit',
        instance: 'Num',
        defaultVal: { operator: '>', numValues: [1] },
        min: '0',
        max: '6',
      },
      {
        property: 'Width',
        instance: 'Num',
        defaultVal: { operator: '=', numValues: [1] },
        min: '1',
        max: '15',
      },
      {
        property: 'Height',
        instance: 'Num',
        defaultVal: { operator: '=', numValues: [1] },
        min: '1',
        max: '6',
      },
      {
        property: 'Identified',
        instance: 'Sel',
        defaultVal: { textValues: ['True'] },
        options: 'Boolean',
      },
      {
        property: 'Mirrored',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
      {
        property: 'Quality' /*TODO*/,
        instance: 'Num',
        defaultVal: { operator: '>', numValues: [0] },
        min: '0',
        max: '33',
      },
      {
        property: 'Replica',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
      {
        property: 'Scourged',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
      {
        property: 'ShaperItem',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
      {
        property: 'StackSize',
        instance: 'Num',
        defaultVal: { operator: '>=', numValues: [5] },
        min: '1',
        max: '100',
      },
      {
        property: 'SynthesisedItem',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
    ],
    'Requirements': [
      {
        property: 'AreaLevel',
        instance: 'Num',
        defaultVal: { operator: '>', numValues: [2] },
        min: '1',
        max: '100',
      },
      {
        property: 'DropLevel',
        instance: 'Num',
        defaultVal: { operator: '>', numValues: [2] },
        min: '1',
        max: '100',
      },
      {
        property: 'GemLevel',
        instance: 'Num',
        defaultVal: { operator: '>', numValues: [15] },
        min: '1',
        max: '22',
      },
      {
        property: 'ItemLevel',
        instance: 'Num',
        defaultVal: { operator: '>', numValues: [20] },
        min: '0',
        max: '100',
      },
    ],
    'Map Filters': [
      {
        property: 'BlightedMap',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
      {
        property: 'ElderMap',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
      {
        property: 'MapTier',
        instance: 'Num',
        defaultVal: { operator: '>=', numValues: [15] },
        min: '1',
        max: '16',
      },
      {
        property: 'ShapedMap',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
      {
        property: 'UberBlightedMap',
        instance: 'Sel',
        defaultVal: { textValues: ['False'] },
        options: 'Boolean',
      },
    ],
    'Actions': [
      {
        property: 'DropSound',
        instance: 'Rad',
        defaultVal: false,
      },
      {
        property: 'DropSoundIfAlertSound',
        instance: 'Rad',
        defaultVal: false,
      },
      {
        property: 'PlayAlertSound',
        instance: 'SelNum',
        defaultVal: { textValues: ['None'], numValues: [100]},
        options: 'AlertSounds',
      },
      {
        property: 'PlayAlertSoundPositional',
        instance: 'SelNum',
        defaultVal: { textValues: ['None'], numValues: [100]},
        options: 'AlertSounds',
      },
      {
        property: 'MinimapIcon',
        instance: 'NumSelSel',
        options: ['Colors', 'Shapes'],
        defaultVal: { numValues: [2], textValues: ['Cyan', 'Diamond'] },
        min: '-1',
        max: '2',
      },
      {
        property: 'PlayEffect',
        instance: 'SelChx',
        defaultVal: { textValues: ['Red', 'Temp'] },
        options: 'Colors',
        value: 'Temp',
      },
      {
        property: 'SetBackgroundColor',
        instance: 'Col',
        defaultVal: { colorValues: [[255, 255, 255, 255]] },
        min: '0',
        max: '255',
      },
      {
        property: 'SetBorderColor',
        instance: 'Col',
        defaultVal: { colorValues: [[255, 255, 255, 255]] },
        min: '0',
        max: '255',
      },
      {
        property: 'SetFontSize',
        instance: 'Num',
        defaultVal: { numValues: [30] },
        min: '1',
        max: '45',
      },
      {
        property: 'SetTextColor',
        instance: 'Col',
        defaultVal: { colorValues: [[255, 255, 255, 255]] },
        min: '0',
        max: '255',
      },
    ],
  },
  AlertSounds:['None', 'ShGeneral', 'ShAlchemy', 'ShChaos', 'ShRegal', 'ShVaal', 'ShFusing', 'ShBlessed', 'ShExalted', 'ShDivine', 'ShMirror', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17'],
  Influences: [
    'Shaper',
    'Elder',
    'Crusader',
    'Hunter',
    'Redeemer',
    'Warlord',
  ],
  EnchantmentPassiveNodes: [
    'Damage over Time',
    'Minion',
    'Curse',
    'Reservation',
  ] /*TODO*/,
  Shapes: [
    'Circle',
    'Diamond',
    'Hexagon',
    'Square',
    'Star',
    'Triangle',
    'Cross',
    'Moon',
    'Raindrop',
    'Kite',
    'Pentagon',
    'UpsideDownHouse',
  ],
  Colors: [
    'None',
    'Red',
    'Green',
    'Blue',
    'Brown',
    'White',
    'Yellow',
    'Cyan',
    'Grey',
    'Orange',
    'Pink',
    'Purple',
  ],
  Boolean: ['True', 'False'],
  Operators: ['=', '!', '<=', '>=', '<', '>', '=='],
  GemQualityTypes: ['Superior', 'Divergent', 'Anomalous', 'Phantasmal'],
  ArchnemesisMods: [
    'Steel-infused',
    'Flameweaver',
    'Stormweaver',
    'Frostweaver',
    'Gargantuan',
    'Hasted',
    'Chaosweaver',
    'Arcane Buffer',
    'Echoist',
    'Sentinel',
    'Splinterer',
    'Deadeye',
    'Electrocuting',
    'Vampiric',
    'Overcharged',
    'Flame Strider',
    'Frost Strider',
    'Storm Strider',
    'Ice Prison',
    'Entangler',
    'Toxic',
    'Treant Horde',
    'Bloodletter',
    'Bonebreaker',
    'Juggernaut',
    'Soul Conduit',
    'Consecrator',
    'Frenzied',
    'Assassin',
    'Necromancer',
    'Hexer',
    'Mirror Image',
    'Spirit Walkers',
    'Union of Souls',
    'Storm Herald',
    'Prismatic',
    'Bombardier',
    'Malediction',
    'Rejuvenating',
    'Executioner',
    'Temporal Bubble',
    'Soul Eater',
    'Corpse Detonator',
    'Magma Barrier',
    'Incendiary',
    'Crystal Skinned',
    'Mana Siphoner',
    'Heralding Minions',
    'Benevolent Guardian',
    'Final Gasp',
    'Berserker',
    'Drought Bringer',
    'Corruptor',
    'Empowered Elements',
    'Effigy',
    'Empowering Minions',
    'Permafrost',
    'Trickster',
    'Opulent',
    'Lunaris-touched',
    'Solaris-touched',
    'Arakaali-touched',
    'Brine King-touched',
    'Tukohama-touched',
    'Abberath-touched',
    'Shakari-touched',
    'Innocence-touched',
    'Kitava-touched',
  ],
  ExplicitMods: [
    "Behemoth's",
    "Betrayer's",
    "Brinerot",
    "Cheetah's",
    "Citaqualotl",
    "Craiceann",
    "Deceiver's",
    "Empress's",
    "Exalter's",
    "Farrul",
    "Fenumus",
    "Flame Shaper's",
    "Frost Singer's",
    "Guatelitzi",
    "Hellion's",
    "Lava Conjurer's",
    "Lithomancer's",
    "Mad Lord's",
    "Magister's",
    "Martinet's",
    "Matatl",
    "Mutewind",
    "of Concord",
    "of Countervailing",
    "of Crafting",
    "of Harmony",
    "of Impermeability",
    "of Imperviousness",
    "of Prefixes",
    "of Shockproofing",
    "of Spellcraft",
    "of the Deathless",
    "of the Lightning Rod",
    "of the Mammoth",
    "of the Molten Core",
    "of the Sempiternal",
    "of the Solar Storm",
    "of the Tundra",
    "of the Underground",
    "of Weaponcraft",
    "Overseer's",
    "Paragon's",
    "Prime",
    "Provocateur's",
    "Puhuarte",
    "Redblade",
    "Rimedweller's",
    "Saqawal",
    "Sharpshooter's",
    "Splintermind's",
    "Stormbrewer's",
    "Subterranean",
    "Suffixed",
    "Tacati",
    "Tecton's",
    "Tempest Master's",
    "Thunderhand's",
    "Topotante",
    "Turncoat's",
    "Veil",
    "Vulcanist's",
    "Weaponmaster's",
    "Winter Beckoner's",
    "Xopec",
    'of Haast',
    'of Tzteosh',
    'of Ephij',
    'of Perenniality',
    'of Assuaging', 
    'of the Dielectric',
    'of Thawing',
    'of Quenching',
    'of the Antidote',
    'of the Iguana',
    'of the Starfish',
    'of the Penguin',
    'of the Eel',
    'of the Opossum',
    "Flagellant's",
    'of the Cheetah',
  ] /*TODO*/,
  Rarity: ['Normal', 'Magic', 'Rare', 'Unique'],
  BaseTypes: JSON.parse(baseTypes),
  Classes: [
    'Abyss Jewels',
    'Active Skill Gem',
    'Amulet',
    'Atlas Upgrade Item',
    'Belt',
    "Blueprint",
    'Body Armour',
    'Boots',
    'Bow',
    'Claw',
    "Contract",
    'Currency',
    'Dagger',
    'Delve Socketable Currency',
    'Delve Stackable Socketable Currency',
    'Divination Card',
    'Expedition Logbook',
    'Flasks',
    'Fishing Rod',
    'Gems',
    'Gloves',
    'Harvest Object',
    'Harvest Infrastructure',
    'Harvest Plant Booster',
    'Harvest Seed',
    'Heist Blueprint',
    'Heist Brooch',
    'Heist Contract',
    'Heist Equipment Reward',
    'Heist Equipment Tool',
    'Heist Equipment Utility',
    'Heist Equipment Weapon',
    'Heist Objective',
    'Heist Target',
    'Heist Gear',
    'Heist Tool',
    'Heist Cloak',
    'Helmet',
    'Hideout Doodad',
    'Hybrid Flask',
    'Incubator',
    'Incursion Item',
    'Jewels',
    'Labyrinth Item',
    'Labyrinth Map Item',
    'Labyrinth Trinket',
    'Leaguestone',
    'Life Flask',
    'Mana Flask',
    'Map',
    'Map Fragments',
    "Memory",
    'Metamorphosis DNA',
    'Microtransaction',
    'Misc Map Item',
    'One Hand Axe',
    'One Hand Mace',
    'One Hand Sword',
    'Pantheon Soul',
    "Piece",
    'Quest',
    'Quiver',
    'Relic',
    'Rings',
    'Rune Dagger',
    'Sanctified Relic',
    'Sceptre',
    'Shield',
    'Stackable Currency',
    'Staff',
    'Support Skill Gem',
    'Trinket',
    'Two Hand Axe',
    'Two Hand Mace',
    'Two Hand Sword',
    'Unarmed',
    'Unique Fragment',
    'Unique Shard',
    'Unique Shard Base',
    'Utility Flasks',
    'Vault Key',
    'Wand',
    'Warstaff',
  ] /*TODO*/,
});

export default defaultContent;
